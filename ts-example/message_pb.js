// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.wav2LipApi.AudioMessage', null, global);
goog.exportSymbol('proto.wav2LipApi.EndMessage', null, global);
goog.exportSymbol('proto.wav2LipApi.ImageFrameMessage', null, global);
goog.exportSymbol('proto.wav2LipApi.StreamMessage', null, global);
goog.exportSymbol('proto.wav2LipApi.StreamMessage.ValueCase', null, global);
goog.exportSymbol('proto.wav2LipApi.TalkConfigRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wav2LipApi.TalkConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wav2LipApi.TalkConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wav2LipApi.TalkConfigRequest.displayName = 'proto.wav2LipApi.TalkConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wav2LipApi.AudioMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wav2LipApi.AudioMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wav2LipApi.AudioMessage.displayName = 'proto.wav2LipApi.AudioMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wav2LipApi.ImageFrameMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wav2LipApi.ImageFrameMessage.repeatedFields_, null);
};
goog.inherits(proto.wav2LipApi.ImageFrameMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wav2LipApi.ImageFrameMessage.displayName = 'proto.wav2LipApi.ImageFrameMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wav2LipApi.EndMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wav2LipApi.EndMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wav2LipApi.EndMessage.displayName = 'proto.wav2LipApi.EndMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wav2LipApi.StreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.wav2LipApi.StreamMessage.oneofGroups_);
};
goog.inherits(proto.wav2LipApi.StreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wav2LipApi.StreamMessage.displayName = 'proto.wav2LipApi.StreamMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wav2LipApi.TalkConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wav2LipApi.TalkConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.TalkConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    character: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sceneId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wav2LipApi.TalkConfigRequest}
 */
proto.wav2LipApi.TalkConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wav2LipApi.TalkConfigRequest;
  return proto.wav2LipApi.TalkConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wav2LipApi.TalkConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wav2LipApi.TalkConfigRequest}
 */
proto.wav2LipApi.TalkConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFps(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wav2LipApi.TalkConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wav2LipApi.TalkConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.TalkConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string character = 1;
 * @return {string}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.getCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.TalkConfigRequest} returns this
 */
proto.wav2LipApi.TalkConfigRequest.prototype.setCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.TalkConfigRequest} returns this
 */
proto.wav2LipApi.TalkConfigRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 fps = 3;
 * @return {number}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wav2LipApi.TalkConfigRequest} returns this
 */
proto.wav2LipApi.TalkConfigRequest.prototype.setFps = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string scene_id = 4;
 * @return {string}
 */
proto.wav2LipApi.TalkConfigRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.TalkConfigRequest} returns this
 */
proto.wav2LipApi.TalkConfigRequest.prototype.setSceneId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wav2LipApi.AudioMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.wav2LipApi.AudioMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wav2LipApi.AudioMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.AudioMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    aduio: jspb.Message.getFieldWithDefault(msg, 1, ""),
    emitTime: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wav2LipApi.AudioMessage}
 */
proto.wav2LipApi.AudioMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wav2LipApi.AudioMessage;
  return proto.wav2LipApi.AudioMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wav2LipApi.AudioMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wav2LipApi.AudioMessage}
 */
proto.wav2LipApi.AudioMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAduio(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmitTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wav2LipApi.AudioMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wav2LipApi.AudioMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wav2LipApi.AudioMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.AudioMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAduio();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmitTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string aduio = 1;
 * @return {string}
 */
proto.wav2LipApi.AudioMessage.prototype.getAduio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.AudioMessage} returns this
 */
proto.wav2LipApi.AudioMessage.prototype.setAduio = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string emit_time = 2;
 * @return {string}
 */
proto.wav2LipApi.AudioMessage.prototype.getEmitTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.AudioMessage} returns this
 */
proto.wav2LipApi.AudioMessage.prototype.setEmitTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wav2LipApi.ImageFrameMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.wav2LipApi.ImageFrameMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wav2LipApi.ImageFrameMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.ImageFrameMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceBoxList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    emitTime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sceneFrameIdx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    clipFrameIdx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sceneFrameTotal: jspb.Message.getFieldWithDefault(msg, 5, 0),
    image: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wav2LipApi.ImageFrameMessage}
 */
proto.wav2LipApi.ImageFrameMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wav2LipApi.ImageFrameMessage;
  return proto.wav2LipApi.ImageFrameMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wav2LipApi.ImageFrameMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wav2LipApi.ImageFrameMessage}
 */
proto.wav2LipApi.ImageFrameMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFaceBox(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmitTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneFrameIdx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClipFrameIdx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSceneFrameTotal(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wav2LipApi.ImageFrameMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wav2LipApi.ImageFrameMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.ImageFrameMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceBoxList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getEmitTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSceneFrameIdx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getClipFrameIdx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSceneFrameTotal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * repeated int32 face_box = 1;
 * @return {!Array<number>}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getFaceBoxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setFaceBoxList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.addFaceBox = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.clearFaceBoxList = function() {
  return this.setFaceBoxList([]);
};


/**
 * optional string emit_time = 2;
 * @return {string}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getEmitTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setEmitTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 scene_frame_idx = 3;
 * @return {number}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getSceneFrameIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setSceneFrameIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 clip_frame_idx = 4;
 * @return {number}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getClipFrameIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setClipFrameIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 scene_frame_total = 5;
 * @return {number}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getSceneFrameTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setSceneFrameTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string image = 6;
 * @return {string}
 */
proto.wav2LipApi.ImageFrameMessage.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.ImageFrameMessage} returns this
 */
proto.wav2LipApi.ImageFrameMessage.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wav2LipApi.EndMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.wav2LipApi.EndMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wav2LipApi.EndMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.EndMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wav2LipApi.EndMessage}
 */
proto.wav2LipApi.EndMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wav2LipApi.EndMessage;
  return proto.wav2LipApi.EndMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wav2LipApi.EndMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wav2LipApi.EndMessage}
 */
proto.wav2LipApi.EndMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wav2LipApi.EndMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wav2LipApi.EndMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wav2LipApi.EndMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.EndMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.wav2LipApi.EndMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.EndMessage} returns this
 */
proto.wav2LipApi.EndMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.wav2LipApi.StreamMessage.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.wav2LipApi.StreamMessage.ValueCase = {
  VALUE_NOT_SET: 0,
  AUDIOINFO: 2,
  IMAGEINFO: 3,
  ENDINFO: 4
};

/**
 * @return {proto.wav2LipApi.StreamMessage.ValueCase}
 */
proto.wav2LipApi.StreamMessage.prototype.getValueCase = function() {
  return /** @type {proto.wav2LipApi.StreamMessage.ValueCase} */(jspb.Message.computeOneofCase(this, proto.wav2LipApi.StreamMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wav2LipApi.StreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.wav2LipApi.StreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wav2LipApi.StreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.StreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audioinfo: (f = msg.getAudioinfo()) && proto.wav2LipApi.AudioMessage.toObject(includeInstance, f),
    imageinfo: (f = msg.getImageinfo()) && proto.wav2LipApi.ImageFrameMessage.toObject(includeInstance, f),
    endinfo: (f = msg.getEndinfo()) && proto.wav2LipApi.EndMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wav2LipApi.StreamMessage}
 */
proto.wav2LipApi.StreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wav2LipApi.StreamMessage;
  return proto.wav2LipApi.StreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wav2LipApi.StreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wav2LipApi.StreamMessage}
 */
proto.wav2LipApi.StreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.wav2LipApi.AudioMessage;
      reader.readMessage(value,proto.wav2LipApi.AudioMessage.deserializeBinaryFromReader);
      msg.setAudioinfo(value);
      break;
    case 3:
      var value = new proto.wav2LipApi.ImageFrameMessage;
      reader.readMessage(value,proto.wav2LipApi.ImageFrameMessage.deserializeBinaryFromReader);
      msg.setImageinfo(value);
      break;
    case 4:
      var value = new proto.wav2LipApi.EndMessage;
      reader.readMessage(value,proto.wav2LipApi.EndMessage.deserializeBinaryFromReader);
      msg.setEndinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wav2LipApi.StreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wav2LipApi.StreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wav2LipApi.StreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wav2LipApi.StreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudioinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.wav2LipApi.AudioMessage.serializeBinaryToWriter
    );
  }
  f = message.getImageinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.wav2LipApi.ImageFrameMessage.serializeBinaryToWriter
    );
  }
  f = message.getEndinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.wav2LipApi.EndMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.wav2LipApi.StreamMessage.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wav2LipApi.StreamMessage} returns this
 */
proto.wav2LipApi.StreamMessage.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AudioMessage audioInfo = 2;
 * @return {?proto.wav2LipApi.AudioMessage}
 */
proto.wav2LipApi.StreamMessage.prototype.getAudioinfo = function() {
  return /** @type{?proto.wav2LipApi.AudioMessage} */ (
    jspb.Message.getWrapperField(this, proto.wav2LipApi.AudioMessage, 2));
};


/**
 * @param {?proto.wav2LipApi.AudioMessage|undefined} value
 * @return {!proto.wav2LipApi.StreamMessage} returns this
*/
proto.wav2LipApi.StreamMessage.prototype.setAudioinfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.wav2LipApi.StreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wav2LipApi.StreamMessage} returns this
 */
proto.wav2LipApi.StreamMessage.prototype.clearAudioinfo = function() {
  return this.setAudioinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wav2LipApi.StreamMessage.prototype.hasAudioinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageFrameMessage imageInfo = 3;
 * @return {?proto.wav2LipApi.ImageFrameMessage}
 */
proto.wav2LipApi.StreamMessage.prototype.getImageinfo = function() {
  return /** @type{?proto.wav2LipApi.ImageFrameMessage} */ (
    jspb.Message.getWrapperField(this, proto.wav2LipApi.ImageFrameMessage, 3));
};


/**
 * @param {?proto.wav2LipApi.ImageFrameMessage|undefined} value
 * @return {!proto.wav2LipApi.StreamMessage} returns this
*/
proto.wav2LipApi.StreamMessage.prototype.setImageinfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.wav2LipApi.StreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wav2LipApi.StreamMessage} returns this
 */
proto.wav2LipApi.StreamMessage.prototype.clearImageinfo = function() {
  return this.setImageinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wav2LipApi.StreamMessage.prototype.hasImageinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EndMessage endInfo = 4;
 * @return {?proto.wav2LipApi.EndMessage}
 */
proto.wav2LipApi.StreamMessage.prototype.getEndinfo = function() {
  return /** @type{?proto.wav2LipApi.EndMessage} */ (
    jspb.Message.getWrapperField(this, proto.wav2LipApi.EndMessage, 4));
};


/**
 * @param {?proto.wav2LipApi.EndMessage|undefined} value
 * @return {!proto.wav2LipApi.StreamMessage} returns this
*/
proto.wav2LipApi.StreamMessage.prototype.setEndinfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.wav2LipApi.StreamMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wav2LipApi.StreamMessage} returns this
 */
proto.wav2LipApi.StreamMessage.prototype.clearEndinfo = function() {
  return this.setEndinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wav2LipApi.StreamMessage.prototype.hasEndinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.wav2LipApi);
